package benchmarks.cec.cec2005

import scala.io.Source.fromResource

import zio.prelude.NonEmptyList
import zio._

import benchmarks.matrix._

import atto._, Atto._

object Data {
  // 100 values
  val sphere_func_data: NonEmptyList[Double] =
    NonEmptyList(-39.3119, 58.8999, -46.3224, -74.6515, -16.7997, -80.5441, -10.5935, 24.9694, 89.8384, 9.1119, -10.7443, -27.8558, -12.5806, 7.593, 74.8127, 68.4959, -53.4293, 78.8544, -68.5957, 63.7432, 31.347, -37.5016, 33.8929, -88.8045, -78.7719, -66.4944, 44.1972, 18.3836, 26.5212, 84.4723, 39.1769, -61.4863, -25.6038, -81.1829, 58.6958, -30.8386, -72.6725, 89.9257, -15.1934, -4.3337, 5.343, 10.5603, -77.7268, 52.0859, 40.3944, 88.3328, -55.8306, 1.3181, 36.025, -69.9271, -8.6279, -56.8944, 85.1296, 17.6736, 6.1529, -17.6957, -58.9537, 30.3564, 15.9207, -18.0082, 80.6411, -42.3912, 76.2776, -50.1652, -73.5736, 28.3369, -57.9905, -22.7327, 52.0269, 39.2599, 10.8679, 77.8207, 66.0395, -50.0667, 55.7063, 73.7141, 38.5296, -56.7865, -89.6477, 37.9576, 29.472, -35.4641, -31.7868, 77.3235, 54.7906, -48.2794, 74.2714, 72.6103, 62.964, -14.1446, 20.4923, 46.5897, -83.6021, -46.4809, 83.7373, -79.6611, 24.3479, -17.2303, 72.3404, -36.4022)

  // 100 values
  val schwefel_102_data: NonEmptyList[Double] =
    NonEmptyList(35.6267, -82.9123, -10.6423, -83.5815, 83.1552, 47.048, -89.4359, -27.4219, 76.1448, -39.0595, 48.8857, -3.9828, -71.9243, 64.1947, -47.7338, -5.9896, -26.2828, -59.1811, 14.6028, -85.478, -50.4901, 0.924, 32.3978, 30.2388, -85.0949, 60.1197, -36.2183, -8.5883, -5.1971, 81.5531, -23.4316, -25.3505, -41.2485, 8.8018, -24.2222, -87.9807, 78.0473, -48.0528, 14.0177, -36.6405, 12.2168, 18.1449, -64.5647, -84.8493, -76.6088, -1.7042, -36.0761, 37.0336, 18.4431, -64.359, -39.3692, -17.714, 30.1985, -18.5483, 9.6866, 82.6009, -45.5256, 5.1443, 74.204, 66.8103, -63.4704, 13.0329, -5.6878, 29.5271, -0.4353, -26.1652, -6.6847, -80.2291, -29.5815, 82.0422, 77.177, -11.277, 32.0759, -2.6858, 81.5096, 64.077, -26.1294, -84.782, -62.8768, -37.6355, 76.8916, 53.417, -25.3311, -38.0702, -84.1738, -11.2246, -83.4619, -17.5508, -36.5285, 89.5528, 25.8794, 68.6252, 55.7968, -29.5975, -58.0976, 65.7413, -8.8703, -5.3281, 74.0661, 4.0338)

  // 100 values
  val schwefel_206_data: NonEmptyList[Double] =
    NonEmptyList(-5.5559, 7.947, -1.538, 8.3897, 7.7182, -8.3147, -2.1423, -2.4392, -3.3787, -7.3047, 3.058, 6.7613, 2.3444, 5.6514, 1.0491, -0.8324, 1.3039, -0.0651, 0.0424, -6.5176, -8.6977, 2.7053, -1.4842, -8.8158, 5.6475, -4.5999, 3.6337, -6.4068, 4.8867, 8.2225, 6.6873, -5.8862, 2.5925, 0.8027, 7.5525, 4.2621, 3.5091, -2.6055, -8.4063, 6.1947, -6.5024, -8.144, -4.8444, 3.1572, 3.9624, -8.4969, 6.2642, 1.1448, 3.9132, 3.614, -8.4785, 0.2955, 3.5597, -5.5854, -8.9173, 4.0627, 8.387, -3.768, 5.9001, 3.8212, -6.4771, 6.8886, -2.4951, 2.5007, 1.3866, -7.3488, -1.5349, 2.9223, 7.1813, -4.799, 8.3061, -8.7911, -6.3035, -6.1222, 5.7116, 7.4369, 6.1738, -7.1118, 3.7062, 6.1274, 1.3696, -4.5894, 4.5844, -1.2133, 4.18, 0.3337, 7.3355, 8.16, 1.4422, 7.9909, -8.1183, -6.8285, -2.9079, 0.2028, -6.2375, 0.1294, 0.1474, 2.6981, 0.4233, 6.1942)

  // 100 values
  val high_cond_elliptic_rot_data: NonEmptyList[Double] =
    NonEmptyList(-32.2013, 64.9776, -38.3, -23.2582, -54.0088, 86.6286, -6.3009, -49.3644, 5.3499, 52.2418, -13.3643, 73.1263, -8.5691, -20.4915, -60.1487, 16.0884, -78.3319, 70.0387, -6.8521, -64.797, 65.4005, -26.0233, -33.8757, 51.5893, 27.6427, -69.4485, 25.5123, -59.0782, -66.5481, -51.2733, -81.776, -71.6572, 37.081, -63.4248, -64.7785, 31.5299, 18.5387, 9.8342, -0.6037, 1.7346, 70.1605, -82.0391, -42.7368, -83.593, -85.0255, 41.1773, 4.1649, -13.4505, -0.31, -38.7944, 71.2702, 65.532, 8.7753, -55.4691, -20.6252, 22.2901, 13.6798, 65.6745, 75.8418, 27.8926, -15.0616, -17.3036, 57.9346, -86.6326, 65.0596, 47.3884, 29.166, 65.5435, 3.4643, -39.814, 18.2261, 77.0446, 62.1882, -11.4, -10.6218, 70.1276, -40.8673, -24.4451, 52.1398, -10.5136, 29.2399, 2.1705, 44.0863, 81.7943, 80.0466, 88.3266, 16.6098, -50.2573, -71.6993, 71.5368, 61.4273, -3.6739, 77.9428, -22.3294, 64.7634, -74.2823, 14.1899, 37.8473, -77.7129, 28.9959)



  val nonWhitespace: Parser[String] = Atto.many1(Atto.oneOf(".-+eE0123456789")).map(_.toList.mkString)
  val doubleParser: Parser[Double] = nonWhitespace.map(_.toDouble)
  val listOfDoubles: Parser[List[Double]] = many(Atto.skipWhitespace ~> doubleParser)

  def parseResource[A](resource: String, parser: Parser[A]): Task[Iterator[A]] =
    ZIO.effect {
      fromResource(resource).getLines().map(line => {
        parser.parseOnly(line) match {
          case ParseResult.Fail(_, _, message) => throw new java.io.IOException(message)
          case ParseResult.Done(_, result) => result
          case ParseResult.Partial(_) => throw new java.io.IOException("Parsing of resource failed: Obtained a partial parse result")
        }
      })
    }


  def elliptic_M_D2: Task[Matrix[Double]] =
    parseResource("cec2005/elliptic_M_D2.txt", listOfDoubles)
      .map(_.map(_.toVector).toVector)

  def elliptic_M_D10: Task[Matrix[Double]] =
    parseResource("cec2005/elliptic_M_D10.txt", listOfDoubles)
      .map(_.map(_.toVector).toVector)

  def elliptic_M_D30: Task[Matrix[Double]] =
    parseResource("cec2005/elliptic_M_D30.txt", listOfDoubles)
      .map(_.map(_.toVector).toVector)

  def elliptic_M_D50: Task[Matrix[Double]] =
    parseResource("cec2005/elliptic_M_D50.txt", listOfDoubles)
      .map(_.map(_.toVector).toVector)


}
